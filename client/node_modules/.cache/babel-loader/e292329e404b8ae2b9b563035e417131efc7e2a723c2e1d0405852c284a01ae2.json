{"ast":null,"code":"import{useQuery}from\"@tanstack/react-query\";const paintingsTableUrl=\"https://api.airtable.com/v0/app2HxNPQejnLR2g0/tblAePvviV6Sd00Ez\";async function fetchPaintings(){const response=await fetch(paintingsTableUrl,{headers:{Authorization:\"Bearer \".concat(process.env.REACT_APP_AIRTABLE_TOKEN)}});const data=await response.json();const paintings=[];for(const record of data.records){const photos=record.fields.photo;if(!photos||photos.length!==1){// Each painting must have exactly one primary photo. TODO: do we want multiple photos per painting?\ncontinue;}const photo={url:photos[0].url,height:photos[0].height,width:photos[0].width};const painting={id:record.fields.painting_number,photo,year:record.fields.year,name:record.fields.name,size:record.fields.size,status:record.fields.status,conditionNotes:record.fields.condition_notes,isFramed:record.fields.framed,medium:record.fields.medium};paintings.push(painting);}return paintings;}export function usePaintings(){const{isLoading,isError,data}=useQuery({queryKey:['paintings'],queryFn:fetchPaintings,// This query should only be made once per session!\n// Never need to refetch this.\nstaleTime:Infinity,retry:false});if(isLoading){return'loading';}if(isError){return'error';}return data||'error';}","map":{"version":3,"names":["useQuery","paintingsTableUrl","fetchPaintings","response","fetch","headers","Authorization","concat","process","env","REACT_APP_AIRTABLE_TOKEN","data","json","paintings","record","records","photos","fields","photo","length","url","height","width","painting","id","painting_number","year","name","size","status","conditionNotes","condition_notes","isFramed","framed","medium","push","usePaintings","isLoading","isError","queryKey","queryFn","staleTime","Infinity","retry"],"sources":["/Users/morgan/dev/paintings/src/usePaintings.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\nimport { Painting, PaintingsResponse, Photo } from \"./types\";\n\nconst paintingsTableUrl = \"https://api.airtable.com/v0/app2HxNPQejnLR2g0/tblAePvviV6Sd00Ez\";\n\nasync function fetchPaintings(): Promise<Painting[]> {\n  const response = await fetch(\n    paintingsTableUrl,\n    { headers: { Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_TOKEN}` }},\n  );\n\n  const data = await response.json();\n  const paintings: Painting[] = [];\n\n  for (const record of data.records) {\n    const photos = record.fields.photo;\n    if (!photos || photos.length !== 1) { // Each painting must have exactly one primary photo. TODO: do we want multiple photos per painting?\n      continue;\n    }\n    const photo: Photo = {\n      url: photos[0].url,\n      height: photos[0].height,\n      width: photos[0].width,\n    }\n\n    const painting: Painting = {\n      id: record.fields.painting_number,\n      photo,\n      year: record.fields.year,\n      name: record.fields.name,\n      size: record.fields.size,\n      status: record.fields.status,\n      conditionNotes: record.fields.condition_notes,\n      isFramed: record.fields.framed,\n      medium: record.fields.medium,\n    };\n    paintings.push(painting);\n  }\n  return paintings;\n}\n\nexport function usePaintings(): PaintingsResponse {\n  const {\n    isLoading,\n    isError,\n    data,\n  } = useQuery({\n    queryKey: ['paintings'],\n    queryFn: fetchPaintings,\n    // This query should only be made once per session!\n    // Never need to refetch this.\n    staleTime: Infinity,\n    retry: false,\n  });\n\n  if (isLoading) {\n    return 'loading';\n  }\n  if (isError) {\n    return 'error';\n  }\n\n  return data || 'error';\n}"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,uBAAuB,CAGhD,KAAM,CAAAC,iBAAiB,CAAG,iEAAiE,CAE3F,cAAe,CAAAC,cAAcA,CAAA,CAAwB,CACnD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAC1BH,iBAAiB,CACjB,CAAEI,OAAO,CAAE,CAAEC,aAAa,WAAAC,MAAA,CAAYC,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAG,CAAC,CAChF,CAAC,CAED,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClC,KAAM,CAAAC,SAAqB,CAAG,EAAE,CAEhC,IAAK,KAAM,CAAAC,MAAM,GAAI,CAAAH,IAAI,CAACI,OAAO,CAAE,CACjC,KAAM,CAAAC,MAAM,CAAGF,MAAM,CAACG,MAAM,CAACC,KAAK,CAClC,GAAI,CAACF,MAAM,EAAIA,MAAM,CAACG,MAAM,GAAK,CAAC,CAAE,CAAE;AACpC,SACF,CACA,KAAM,CAAAD,KAAY,CAAG,CACnBE,GAAG,CAAEJ,MAAM,CAAC,CAAC,CAAC,CAACI,GAAG,CAClBC,MAAM,CAAEL,MAAM,CAAC,CAAC,CAAC,CAACK,MAAM,CACxBC,KAAK,CAAEN,MAAM,CAAC,CAAC,CAAC,CAACM,KACnB,CAAC,CAED,KAAM,CAAAC,QAAkB,CAAG,CACzBC,EAAE,CAAEV,MAAM,CAACG,MAAM,CAACQ,eAAe,CACjCP,KAAK,CACLQ,IAAI,CAAEZ,MAAM,CAACG,MAAM,CAACS,IAAI,CACxBC,IAAI,CAAEb,MAAM,CAACG,MAAM,CAACU,IAAI,CACxBC,IAAI,CAAEd,MAAM,CAACG,MAAM,CAACW,IAAI,CACxBC,MAAM,CAAEf,MAAM,CAACG,MAAM,CAACY,MAAM,CAC5BC,cAAc,CAAEhB,MAAM,CAACG,MAAM,CAACc,eAAe,CAC7CC,QAAQ,CAAElB,MAAM,CAACG,MAAM,CAACgB,MAAM,CAC9BC,MAAM,CAAEpB,MAAM,CAACG,MAAM,CAACiB,MACxB,CAAC,CACDrB,SAAS,CAACsB,IAAI,CAACZ,QAAQ,CAAC,CAC1B,CACA,MAAO,CAAAV,SAAS,CAClB,CAEA,MAAO,SAAS,CAAAuB,YAAYA,CAAA,CAAsB,CAChD,KAAM,CACJC,SAAS,CACTC,OAAO,CACP3B,IACF,CAAC,CAAGX,QAAQ,CAAC,CACXuC,QAAQ,CAAE,CAAC,WAAW,CAAC,CACvBC,OAAO,CAAEtC,cAAc,CACvB;AACA;AACAuC,SAAS,CAAEC,QAAQ,CACnBC,KAAK,CAAE,KACT,CAAC,CAAC,CAEF,GAAIN,SAAS,CAAE,CACb,MAAO,SAAS,CAClB,CACA,GAAIC,OAAO,CAAE,CACX,MAAO,OAAO,CAChB,CAEA,MAAO,CAAA3B,IAAI,EAAI,OAAO,CACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}