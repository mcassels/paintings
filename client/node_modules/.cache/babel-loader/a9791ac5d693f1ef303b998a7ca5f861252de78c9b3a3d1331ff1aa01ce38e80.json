{"ast":null,"code":"import { cssClass, useLightboxProps, makeUseContext, useController, clsx, cssVar, createIcon, createIconDisabled, IconButton, addToolbarButton, createModule } from '../../index.js';\nimport * as React from 'react';\nimport { PLUGIN_CAPTIONS } from '../../types.js';\nconst cssPrefix = className => cssClass(\"slide_\".concat(className));\nconst defaultCaptionsProps = {\n  descriptionTextAlign: \"start\",\n  descriptionMaxLines: 3,\n  showToggle: false\n};\nconst resolveCaptionsProps = captions => ({\n  ...defaultCaptionsProps,\n  ...captions\n});\nfunction useCaptionsProps() {\n  const {\n    captions\n  } = useLightboxProps();\n  return resolveCaptionsProps(captions);\n}\nconst CaptionsContext = React.createContext(null);\nconst useCaptions = makeUseContext(\"useCaptions\", \"CaptionsContext\", CaptionsContext);\nfunction CaptionsContextProvider(_ref) {\n  let {\n    captions,\n    children\n  } = _ref;\n  const {\n    ref\n  } = resolveCaptionsProps(captions);\n  const [visible, setVisible] = React.useState(true);\n  const context = React.useMemo(() => ({\n    visible,\n    show: () => setVisible(true),\n    hide: () => setVisible(false)\n  }), [visible]);\n  React.useImperativeHandle(ref, () => context, [context]);\n  return React.createElement(CaptionsContext.Provider, {\n    value: context\n  }, children);\n}\nfunction Title(_ref2) {\n  let {\n    title\n  } = _ref2;\n  const {\n    toolbarWidth\n  } = useController();\n  const {\n    styles\n  } = useLightboxProps();\n  const {\n    visible\n  } = useCaptions();\n  if (!visible) return null;\n  return React.createElement(\"div\", {\n    style: styles.captionsTitleContainer,\n    className: clsx(cssPrefix(\"captions_container\"), cssPrefix(\"title_container\"))\n  }, React.createElement(\"div\", {\n    className: cssPrefix(\"title\"),\n    style: {\n      ...(toolbarWidth ? {\n        [cssVar(\"toolbar_width\")]: \"\".concat(toolbarWidth, \"px\")\n      } : null),\n      ...styles.captionsTitle\n    }\n  }, title));\n}\nfunction Description(_ref3) {\n  let {\n    description\n  } = _ref3;\n  const {\n    descriptionTextAlign,\n    descriptionMaxLines\n  } = useCaptionsProps();\n  const {\n    styles\n  } = useLightboxProps();\n  const {\n    visible\n  } = useCaptions();\n  if (!visible) return null;\n  return React.createElement(\"div\", {\n    style: styles.captionsDescriptionContainer,\n    className: clsx(cssPrefix(\"captions_container\"), cssPrefix(\"description_container\"))\n  }, React.createElement(\"div\", {\n    className: cssPrefix(\"description\"),\n    style: {\n      ...(descriptionTextAlign !== defaultCaptionsProps.descriptionTextAlign || descriptionMaxLines !== defaultCaptionsProps.descriptionMaxLines ? {\n        [cssVar(\"slide_description_text_align\")]: descriptionTextAlign,\n        [cssVar(\"slide_description_max_lines\")]: descriptionMaxLines\n      } : null),\n      ...styles.captionsDescription\n    }\n  }, typeof description === \"string\" ? description.split(\"\\n\").flatMap((line, index) => [...(index > 0 ? [React.createElement(\"br\", {\n    key: index\n  })] : []), line]) : description));\n}\nconst captionsIcon = () => React.createElement(React.Fragment, null, React.createElement(\"path\", {\n  strokeWidth: 2,\n  stroke: \"currentColor\",\n  strokeLinejoin: \"round\",\n  fill: \"none\",\n  d: \"M3 5l18 0l0 14l-18 0l0-14z\"\n}), React.createElement(\"path\", {\n  d: \"M7 15h3c.55 0 1-.45 1-1v-1H9.5v.5h-2v-3h2v.5H11v-1c0-.55-.45-1-1-1H7c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1zm7 0h3c.55 0 1-.45 1-1v-1h-1.5v.5h-2v-3h2v.5H18v-1c0-.55-.45-1-1-1h-3c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1z\"\n}));\nconst CaptionsVisible = createIcon(\"CaptionsVisible\", captionsIcon());\nconst CaptionsHidden = createIconDisabled(\"CaptionsVisible\", captionsIcon());\nfunction CaptionsButton() {\n  const {\n    visible,\n    show,\n    hide\n  } = useCaptions();\n  const {\n    render\n  } = useLightboxProps();\n  if (render.buttonCaptions) {\n    return React.createElement(React.Fragment, null, render.buttonCaptions({\n      visible,\n      show,\n      hide\n    }));\n  }\n  return React.createElement(IconButton, {\n    label: visible ? \"Hide captions\" : \"Show captions\",\n    icon: visible ? CaptionsVisible : CaptionsHidden,\n    renderIcon: visible ? render.iconCaptionsVisible : render.iconCaptionsHidden,\n    onClick: visible ? hide : show\n  });\n}\nfunction Captions(_ref4) {\n  let {\n    augment,\n    addModule\n  } = _ref4;\n  augment(_ref5 => {\n    let {\n      captions: captionsProps,\n      render: {\n        slideFooter: renderFooter,\n        ...restRender\n      },\n      toolbar,\n      ...restProps\n    } = _ref5;\n    const captions = resolveCaptionsProps(captionsProps);\n    return {\n      render: {\n        slideFooter: _ref6 => {\n          let {\n            slide\n          } = _ref6;\n          return React.createElement(React.Fragment, null, renderFooter === null || renderFooter === void 0 ? void 0 : renderFooter({\n            slide\n          }), slide.title && React.createElement(Title, {\n            title: slide.title\n          }), slide.description && React.createElement(Description, {\n            description: slide.description\n          }));\n        },\n        ...restRender\n      },\n      toolbar: addToolbarButton(toolbar, PLUGIN_CAPTIONS, captions.showToggle ? React.createElement(CaptionsButton, null) : null),\n      captions,\n      ...restProps\n    };\n  });\n  addModule(createModule(PLUGIN_CAPTIONS, CaptionsContextProvider));\n}\nexport { Captions as default };","map":{"version":3,"names":["cssClass","useLightboxProps","makeUseContext","useController","clsx","cssVar","createIcon","createIconDisabled","IconButton","addToolbarButton","createModule","React","PLUGIN_CAPTIONS","cssPrefix","className","concat","defaultCaptionsProps","descriptionTextAlign","descriptionMaxLines","showToggle","resolveCaptionsProps","captions","useCaptionsProps","CaptionsContext","createContext","useCaptions","CaptionsContextProvider","_ref","children","ref","visible","setVisible","useState","context","useMemo","show","hide","useImperativeHandle","createElement","Provider","value","Title","_ref2","title","toolbarWidth","styles","style","captionsTitleContainer","captionsTitle","Description","_ref3","description","captionsDescriptionContainer","captionsDescription","split","flatMap","line","index","key","captionsIcon","Fragment","strokeWidth","stroke","strokeLinejoin","fill","d","CaptionsVisible","CaptionsHidden","CaptionsButton","render","buttonCaptions","label","icon","renderIcon","iconCaptionsVisible","iconCaptionsHidden","onClick","Captions","_ref4","augment","addModule","_ref5","captionsProps","slideFooter","renderFooter","restRender","toolbar","restProps","_ref6","slide","default"],"sources":["/Users/morgan/dev/paintings/node_modules/yet-another-react-lightbox/dist/plugins/captions/index.js"],"sourcesContent":["import { cssClass, useLightboxProps, makeUseContext, useController, clsx, cssVar, createIcon, createIconDisabled, IconButton, addToolbarButton, createModule } from '../../index.js';\nimport * as React from 'react';\nimport { PLUGIN_CAPTIONS } from '../../types.js';\n\nconst cssPrefix = (className) => cssClass(`slide_${className}`);\n\nconst defaultCaptionsProps = {\n    descriptionTextAlign: \"start\",\n    descriptionMaxLines: 3,\n    showToggle: false,\n};\nconst resolveCaptionsProps = (captions) => ({\n    ...defaultCaptionsProps,\n    ...captions,\n});\nfunction useCaptionsProps() {\n    const { captions } = useLightboxProps();\n    return resolveCaptionsProps(captions);\n}\n\nconst CaptionsContext = React.createContext(null);\nconst useCaptions = makeUseContext(\"useCaptions\", \"CaptionsContext\", CaptionsContext);\nfunction CaptionsContextProvider({ captions, children }) {\n    const { ref } = resolveCaptionsProps(captions);\n    const [visible, setVisible] = React.useState(true);\n    const context = React.useMemo(() => ({\n        visible,\n        show: () => setVisible(true),\n        hide: () => setVisible(false),\n    }), [visible]);\n    React.useImperativeHandle(ref, () => context, [context]);\n    return React.createElement(CaptionsContext.Provider, { value: context }, children);\n}\n\nfunction Title({ title }) {\n    const { toolbarWidth } = useController();\n    const { styles } = useLightboxProps();\n    const { visible } = useCaptions();\n    if (!visible)\n        return null;\n    return (React.createElement(\"div\", { style: styles.captionsTitleContainer, className: clsx(cssPrefix(\"captions_container\"), cssPrefix(\"title_container\")) },\n        React.createElement(\"div\", { className: cssPrefix(\"title\"), style: {\n                ...(toolbarWidth ? { [cssVar(\"toolbar_width\")]: `${toolbarWidth}px` } : null),\n                ...styles.captionsTitle,\n            } }, title)));\n}\n\nfunction Description({ description }) {\n    const { descriptionTextAlign, descriptionMaxLines } = useCaptionsProps();\n    const { styles } = useLightboxProps();\n    const { visible } = useCaptions();\n    if (!visible)\n        return null;\n    return (React.createElement(\"div\", { style: styles.captionsDescriptionContainer, className: clsx(cssPrefix(\"captions_container\"), cssPrefix(\"description_container\")) },\n        React.createElement(\"div\", { className: cssPrefix(\"description\"), style: {\n                ...(descriptionTextAlign !== defaultCaptionsProps.descriptionTextAlign ||\n                    descriptionMaxLines !== defaultCaptionsProps.descriptionMaxLines\n                    ? {\n                        [cssVar(\"slide_description_text_align\")]: descriptionTextAlign,\n                        [cssVar(\"slide_description_max_lines\")]: descriptionMaxLines,\n                    }\n                    : null),\n                ...styles.captionsDescription,\n            } }, typeof description === \"string\"\n            ? description\n                .split(\"\\n\")\n                .flatMap((line, index) => [...(index > 0 ? [React.createElement(\"br\", { key: index })] : []), line])\n            : description)));\n}\n\nconst captionsIcon = () => (React.createElement(React.Fragment, null,\n    React.createElement(\"path\", { strokeWidth: 2, stroke: \"currentColor\", strokeLinejoin: \"round\", fill: \"none\", d: \"M3 5l18 0l0 14l-18 0l0-14z\" }),\n    React.createElement(\"path\", { d: \"M7 15h3c.55 0 1-.45 1-1v-1H9.5v.5h-2v-3h2v.5H11v-1c0-.55-.45-1-1-1H7c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1zm7 0h3c.55 0 1-.45 1-1v-1h-1.5v.5h-2v-3h2v.5H18v-1c0-.55-.45-1-1-1h-3c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1z\" })));\nconst CaptionsVisible = createIcon(\"CaptionsVisible\", captionsIcon());\nconst CaptionsHidden = createIconDisabled(\"CaptionsVisible\", captionsIcon());\nfunction CaptionsButton() {\n    const { visible, show, hide } = useCaptions();\n    const { render } = useLightboxProps();\n    if (render.buttonCaptions) {\n        return React.createElement(React.Fragment, null, render.buttonCaptions({ visible, show, hide }));\n    }\n    return (React.createElement(IconButton, { label: visible ? \"Hide captions\" : \"Show captions\", icon: visible ? CaptionsVisible : CaptionsHidden, renderIcon: visible ? render.iconCaptionsVisible : render.iconCaptionsHidden, onClick: visible ? hide : show }));\n}\n\nfunction Captions({ augment, addModule }) {\n    augment(({ captions: captionsProps, render: { slideFooter: renderFooter, ...restRender }, toolbar, ...restProps }) => {\n        const captions = resolveCaptionsProps(captionsProps);\n        return {\n            render: {\n                slideFooter: ({ slide }) => (React.createElement(React.Fragment, null, renderFooter === null || renderFooter === void 0 ? void 0 :\n                    renderFooter({ slide }),\n                    slide.title && React.createElement(Title, { title: slide.title }),\n                    slide.description && React.createElement(Description, { description: slide.description }))),\n                ...restRender,\n            },\n            toolbar: addToolbarButton(toolbar, PLUGIN_CAPTIONS, captions.showToggle ? React.createElement(CaptionsButton, null) : null),\n            captions,\n            ...restProps,\n        };\n    });\n    addModule(createModule(PLUGIN_CAPTIONS, CaptionsContextProvider));\n}\n\nexport { Captions as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}