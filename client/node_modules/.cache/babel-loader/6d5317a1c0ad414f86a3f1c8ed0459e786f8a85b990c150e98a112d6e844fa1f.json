{"ast":null,"code":"// src/queryObserver.ts\nimport { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { canFetch } from \"./retryer.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.#currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (typeof this.options.enabled !== \"undefined\" && typeof this.options.enabled !== \"boolean\") {\n      throw new Error(\"Expected enabled to be a boolean\");\n    }\n    this.#updateQuery();\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(this.#currentQuery, prevQuery, this.options, prevOptions)) {\n      this.#executeFetch();\n    }\n    this.updateResult(notifyOptions);\n    if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({\n    ...options\n  } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(this.options, fetchOptions);\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, this.options.staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const {\n      state\n    } = query;\n    let {\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? \"fetching\" : \"paused\";\n        if (!state.dataUpdatedAt) {\n          status = \"pending\";\n        }\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        fetchStatus = \"idle\";\n      }\n    }\n    if (options.select && typeof state.data !== \"undefined\") {\n      if (prevResult && state.data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    } else {\n      data = state.data;\n    }\n    if (typeof options.placeholderData !== \"undefined\" && typeof data === \"undefined\" && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(this.#lastQueryWithDefinedData?.state.data, this.#lastQueryWithDefinedData) : options.placeholderData;\n        if (options.select && typeof placeholderData !== \"undefined\") {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.#selectError = null;\n          } catch (selectError) {\n            this.#selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== \"undefined\") {\n        status = \"success\";\n        data = replaceData(prevResult?.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const result = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const defaultNotifyOptions = {};\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangePropsValue ?? this.#trackedProps);\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.#notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["isServer","isValidTimeout","noop","replaceData","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","canFetch","QueryObserver","constructor","client","options","selectError","bindMethods","setOptions","currentQuery","currentQueryInitialState","currentResult","currentResultState","currentResultOptions","selectFn","selectResult","lastQueryWithDefinedData","staleTimeoutId","refetchIntervalId","currentRefetchInterval","trackedProps","Set","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","executeFetch","updateResult","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","Error","updateQuery","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","updateRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","fetch","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","#executeFetch","promise","throwOnError","catch","#updateStaleTimeout","isStale","time","dataUpdatedAt","timeout","setTimeout","#computeRefetchInterval","refetchInterval","#updateRefetchInterval","nextInterval","setInterval","refetchIntervalInBackground","isFocused","#updateTimers","#clearStaleTimeout","clearTimeout","#clearRefetchInterval","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","error","errorUpdatedAt","fetchStatus","status","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","networkMode","select","placeholderData","Date","now","isFetching","isPending","isError","isLoading","isSuccess","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","some","typedKey","changed","has","#updateQuery","onQueryUpdate","#notify","batch","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime","optimisticResult"],"sources":["/Users/morgan/dev/paintings/node_modules/@tanstack/query-core/src/queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch } from './retryer'\nimport type { QueryClient } from './queryClient'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    this.#updateQuery()\n\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.#currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let { error, errorUpdatedAt, fetchStatus, status } = state\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!state.dataUpdatedAt) {\n          status = 'pending'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Select data if needed\n    if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}