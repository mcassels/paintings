{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nconst paintingsTableUrl = \"https://api.airtable.com/v0/app2HxNPQejnLR2g0/tblAePvviV6Sd00Ez\";\nasync function fetchPaintings() {\n  const response = await fetch(paintingsTableUrl, {\n    headers: {\n      Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_TOKEN}`\n    }\n  });\n  debugger;\n  const data = await response.json();\n  const paintings = [];\n  try {\n    for (const record of data.records) {\n      const photos = record.fields.photo;\n      if (!photos || photos.length !== 1) {\n        // Each painting must have exactly one primary photo. TODO: do we want multiple photos per painting?\n        continue;\n      }\n      const painting = {\n        id: record.fields.painting_number,\n        imageUrl: photos[0].url,\n        year: record.fields.year,\n        name: record.fields.name,\n        size: record.fields.size,\n        status: record.fields.status,\n        conditionNotes: record.fields.condition_notes,\n        isFramed: record.fields.framed,\n        medium: record.fields.medium\n      };\n      debugger;\n      paintings.push(painting);\n    }\n    debugger;\n  } catch (e) {\n    debugger;\n    console.error(e);\n  }\n  return paintings;\n}\nexport function usePaintings() {\n  _s();\n  const {\n    isLoading,\n    isError,\n    data\n  } = useQuery({\n    queryKey: ['paintings'],\n    queryFn: fetchPaintings,\n    // This query should only be made once per session!\n    // Never need to refetch this.\n    staleTime: Infinity,\n    retry: false\n  });\n  if (isLoading) {\n    return 'loading';\n  }\n  if (isError) {\n    return 'error';\n  }\n  return data || 'error';\n}\n_s(usePaintings, \"q1ofiQvR8Bn/xrUmbEB+rJ2Sqs8=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","paintingsTableUrl","fetchPaintings","response","fetch","headers","Authorization","process","env","REACT_APP_AIRTABLE_TOKEN","data","json","paintings","record","records","photos","fields","photo","length","painting","id","painting_number","imageUrl","url","year","name","size","status","conditionNotes","condition_notes","isFramed","framed","medium","push","e","console","error","usePaintings","_s","isLoading","isError","queryKey","queryFn","staleTime","Infinity","retry"],"sources":["/Users/morgan/dev/paintings/src/usePaintings.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\nimport { Painting, PaintingsResponse } from \"./types\";\n\nconst paintingsTableUrl = \"https://api.airtable.com/v0/app2HxNPQejnLR2g0/tblAePvviV6Sd00Ez\";\n\nasync function fetchPaintings(): Promise<Painting[]> {\n  const response = await fetch(\n    paintingsTableUrl,\n    { headers: { Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_TOKEN}` }},\n  );\n  debugger;\n  const data = await response.json();\n  const paintings: Painting[] = [];\n\n  try {\n    for (const record of data.records) {\n      const photos = record.fields.photo;\n      if (!photos || photos.length !== 1) { // Each painting must have exactly one primary photo. TODO: do we want multiple photos per painting?\n        continue;\n      }\n  \n      const painting: Painting = {\n        id: record.fields.painting_number,\n        imageUrl: photos[0].url,\n        year: record.fields.year,\n        name: record.fields.name,\n        size: record.fields.size,\n        status: record.fields.status,\n        conditionNotes: record.fields.condition_notes,\n        isFramed: record.fields.framed,\n        medium: record.fields.medium,\n      };\n      debugger;\n      paintings.push(painting);\n    }\n    debugger;\n  } catch (e) {\n    debugger;\n    console.error(e);\n  }\n  return paintings;\n}\n\nexport function usePaintings(): PaintingsResponse {\n  const {\n    isLoading,\n    isError,\n    data,\n  } = useQuery({\n    queryKey: ['paintings'],\n    queryFn: fetchPaintings,\n    // This query should only be made once per session!\n    // Never need to refetch this.\n    staleTime: Infinity,\n    retry: false,\n  });\n\n  if (isLoading) {\n    return 'loading';\n  }\n  if (isError) {\n    return 'error';\n  }\n\n  return data || 'error';\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAGhD,MAAMC,iBAAiB,GAAG,iEAAiE;AAE3F,eAAeC,cAAcA,CAAA,EAAwB;EACnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,iBAAiB,EACjB;IAAEI,OAAO,EAAE;MAAEC,aAAa,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,wBAAyB;IAAE;EAAC,CAChF,CAAC;EACD;EACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,MAAMC,SAAqB,GAAG,EAAE;EAEhC,IAAI;IACF,KAAK,MAAMC,MAAM,IAAIH,IAAI,CAACI,OAAO,EAAE;MACjC,MAAMC,MAAM,GAAGF,MAAM,CAACG,MAAM,CAACC,KAAK;MAClC,IAAI,CAACF,MAAM,IAAIA,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;QAAE;QACpC;MACF;MAEA,MAAMC,QAAkB,GAAG;QACzBC,EAAE,EAAEP,MAAM,CAACG,MAAM,CAACK,eAAe;QACjCC,QAAQ,EAAEP,MAAM,CAAC,CAAC,CAAC,CAACQ,GAAG;QACvBC,IAAI,EAAEX,MAAM,CAACG,MAAM,CAACQ,IAAI;QACxBC,IAAI,EAAEZ,MAAM,CAACG,MAAM,CAACS,IAAI;QACxBC,IAAI,EAAEb,MAAM,CAACG,MAAM,CAACU,IAAI;QACxBC,MAAM,EAAEd,MAAM,CAACG,MAAM,CAACW,MAAM;QAC5BC,cAAc,EAAEf,MAAM,CAACG,MAAM,CAACa,eAAe;QAC7CC,QAAQ,EAAEjB,MAAM,CAACG,MAAM,CAACe,MAAM;QAC9BC,MAAM,EAAEnB,MAAM,CAACG,MAAM,CAACgB;MACxB,CAAC;MACD;MACApB,SAAS,CAACqB,IAAI,CAACd,QAAQ,CAAC;IAC1B;IACA;EACF,CAAC,CAAC,OAAOe,CAAC,EAAE;IACV;IACAC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;EAClB;EACA,OAAOtB,SAAS;AAClB;AAEA,OAAO,SAASyB,YAAYA,CAAA,EAAsB;EAAAC,EAAA;EAChD,MAAM;IACJC,SAAS;IACTC,OAAO;IACP9B;EACF,CAAC,GAAGV,QAAQ,CAAC;IACXyC,QAAQ,EAAE,CAAC,WAAW,CAAC;IACvBC,OAAO,EAAExC,cAAc;IACvB;IACA;IACAyC,SAAS,EAAEC,QAAQ;IACnBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,IAAIN,SAAS,EAAE;IACb,OAAO,SAAS;EAClB;EACA,IAAIC,OAAO,EAAE;IACX,OAAO,OAAO;EAChB;EAEA,OAAO9B,IAAI,IAAI,OAAO;AACxB;AAAC4B,EAAA,CAtBeD,YAAY;EAAA,QAKtBrC,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}