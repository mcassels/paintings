{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from \"@tanstack/react-query\";\nconst paintingsTableUrl = \"https://api.airtable.com/v0/app2HxNPQejnLR2g0/tblAePvviV6Sd00Ez\";\nasync function fetchPaintings() {\n  const response = await fetch(paintingsTableUrl, {\n    headers: {\n      Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_TOKEN}`\n    }\n  });\n  const data = await response.json();\n  const paintings = [];\n  for (const record of data.records) {\n    const photos = record.fields.photo;\n    const painting = {\n      id: record.fields.painting_number,\n      imageUrl: record.fields.imageUrl[0].url\n    };\n    paintings.push({\n      id: record.fields.painting_number,\n      year: record.fields.year,\n      name: record.fields.name,\n      size: record.fields.size,\n      status: record.fields.status,\n      conditionNotes: record.fields.conditionNotes,\n      isFramed: record.fields.isFramed,\n      medium: record.fields.medium,\n      imageUrl: record.fields.imageUrl[0].url\n    });\n  }\n  return paintings;\n}\nexport function usePaintings() {\n  _s();\n  const {\n    isLoading,\n    isError,\n    data\n  } = useQuery({\n    queryKey: ['paintings'],\n    queryFn: fetchPaintings,\n    // This query should only be made once per session!\n    // Never need to refetch this.\n    staleTime: Infinity\n  });\n  if (isLoading) {\n    return 'loading';\n  }\n  if (isError || data === undefined) {\n    return 'error';\n  }\n  return data;\n}\n_s(usePaintings, \"q1ofiQvR8Bn/xrUmbEB+rJ2Sqs8=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","paintingsTableUrl","fetchPaintings","response","fetch","headers","Authorization","process","env","REACT_APP_AIRTABLE_TOKEN","data","json","paintings","record","records","photos","fields","photo","painting","id","painting_number","imageUrl","url","push","year","name","size","status","conditionNotes","isFramed","medium","usePaintings","_s","isLoading","isError","queryKey","queryFn","staleTime","Infinity","undefined"],"sources":["/Users/morgan/dev/paintings/src/usePaintings.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\";\nimport { Painting, PaintingsResponse } from \"./types\";\n\nconst paintingsTableUrl = \"https://api.airtable.com/v0/app2HxNPQejnLR2g0/tblAePvviV6Sd00Ez\";\n\nasync function fetchPaintings(): Promise<Painting[]> {\n  const response = await fetch(\n    paintingsTableUrl,\n    { headers: { Authorization: `Bearer ${process.env.REACT_APP_AIRTABLE_TOKEN}` }},\n  );\n  const data = await response.json();\n\n  const paintings: Painting[] = [];\n  for (const record of data.records) {\n    const photos = record.fields.photo;\n    const painting: Painting = {\n      id: record.fields.painting_number,\n      imageUrl: record.fields.imageUrl[0].url,\n    };\n    paintings.push({\n      id: record.fields.painting_number,\n      year: record.fields.year,\n      name: record.fields.name,\n      size: record.fields.size,\n      status: record.fields.status,\n      conditionNotes: record.fields.conditionNotes,\n      isFramed: record.fields.isFramed,\n      medium: record.fields.medium,\n      imageUrl: record.fields.imageUrl[0].url,\n    });\n  }\n  return paintings;\n}\n\nexport function usePaintings(): PaintingsResponse {\n  const {\n    isLoading,\n    isError,\n    data,\n  } = useQuery({\n    queryKey: ['paintings'],\n    queryFn: fetchPaintings,\n    // This query should only be made once per session!\n    // Never need to refetch this.\n    staleTime: Infinity,\n  });\n\n  if (isLoading) {\n    return 'loading';\n  }\n  if (isError || data === undefined) {\n    return 'error';\n  }\n\n  return data;\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAGhD,MAAMC,iBAAiB,GAAG,iEAAiE;AAE3F,eAAeC,cAAcA,CAAA,EAAwB;EACnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,iBAAiB,EACjB;IAAEI,OAAO,EAAE;MAAEC,aAAa,EAAG,UAASC,OAAO,CAACC,GAAG,CAACC,wBAAyB;IAAE;EAAC,CAChF,CAAC;EACD,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAElC,MAAMC,SAAqB,GAAG,EAAE;EAChC,KAAK,MAAMC,MAAM,IAAIH,IAAI,CAACI,OAAO,EAAE;IACjC,MAAMC,MAAM,GAAGF,MAAM,CAACG,MAAM,CAACC,KAAK;IAClC,MAAMC,QAAkB,GAAG;MACzBC,EAAE,EAAEN,MAAM,CAACG,MAAM,CAACI,eAAe;MACjCC,QAAQ,EAAER,MAAM,CAACG,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAC,CAACC;IACtC,CAAC;IACDV,SAAS,CAACW,IAAI,CAAC;MACbJ,EAAE,EAAEN,MAAM,CAACG,MAAM,CAACI,eAAe;MACjCI,IAAI,EAAEX,MAAM,CAACG,MAAM,CAACQ,IAAI;MACxBC,IAAI,EAAEZ,MAAM,CAACG,MAAM,CAACS,IAAI;MACxBC,IAAI,EAAEb,MAAM,CAACG,MAAM,CAACU,IAAI;MACxBC,MAAM,EAAEd,MAAM,CAACG,MAAM,CAACW,MAAM;MAC5BC,cAAc,EAAEf,MAAM,CAACG,MAAM,CAACY,cAAc;MAC5CC,QAAQ,EAAEhB,MAAM,CAACG,MAAM,CAACa,QAAQ;MAChCC,MAAM,EAAEjB,MAAM,CAACG,MAAM,CAACc,MAAM;MAC5BT,QAAQ,EAAER,MAAM,CAACG,MAAM,CAACK,QAAQ,CAAC,CAAC,CAAC,CAACC;IACtC,CAAC,CAAC;EACJ;EACA,OAAOV,SAAS;AAClB;AAEA,OAAO,SAASmB,YAAYA,CAAA,EAAsB;EAAAC,EAAA;EAChD,MAAM;IACJC,SAAS;IACTC,OAAO;IACPxB;EACF,CAAC,GAAGV,QAAQ,CAAC;IACXmC,QAAQ,EAAE,CAAC,WAAW,CAAC;IACvBC,OAAO,EAAElC,cAAc;IACvB;IACA;IACAmC,SAAS,EAAEC;EACb,CAAC,CAAC;EAEF,IAAIL,SAAS,EAAE;IACb,OAAO,SAAS;EAClB;EACA,IAAIC,OAAO,IAAIxB,IAAI,KAAK6B,SAAS,EAAE;IACjC,OAAO,OAAO;EAChB;EAEA,OAAO7B,IAAI;AACb;AAACsB,EAAA,CArBeD,YAAY;EAAA,QAKtB/B,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}